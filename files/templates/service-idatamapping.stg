/* Example comment -- just for making the tmLanguage file. */
messageFile(file) ::= <<

// Version: <file.version>
// Service Call: <file.name>
// Application: <file.application>
// Port: <file.port>

namespace LucidEdge.SqlRequests
{
	<file.messages:message()>

	<file.outputs:message()>
}
>>

message(m) ::= <<
<if(m.attributes)><m.attributes:atts(); separator="\n">
<endif><inputs(m.name, m.properties)>

>>

inputs(name, properties) ::= <<
public class <name>Inputs : IParameterBuilder
{
	<properties:prop(); separator="\n">

	public new List\<DataPoint> ToParameters()
	{
		return
		new List\<DataPoint>
		{
			<properties:mapped(); separator=",\n">
		};
	}
}
>>

prop(p) ::= <<
<if(p.attributes)><p.attributes:atts(); separator=", ">
<endif>public <p.type> <p.name> { get; set; }
>>

mapped(p) ::= <<
new DataPoint("<p.name>", <p.name>)
>>

outputs(name, outs) ::= <<
public class <name>Outputs : IDataMapping
{
	public IDictionary\<string,Datapoint> Map { get; set; }

	<outs.properties:data(); separator="\n">
}
>>

data(p) ::= <<
<if(p.attributes)><p.attributes:atts(); separator="\n">
<endif>public <p.type> <p.name> { get { return Map["<p.name>"].To<p.mappedType>(); } }
>>

atts(a) ::= "// [<a>]"